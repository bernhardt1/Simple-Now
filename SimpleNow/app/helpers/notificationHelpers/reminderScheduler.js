import Moment from 'moment';

import convertReminderTimeToISODate from '../timeHelpers/convertReminderTimeToISODate';
import sentryCaptureMessage from '../errorHelpers/sentryCaptureMessage';

import { MAX_NOTIFICATIONS } from '../../constants/magicNumbers';
import getScheduledNotifications from './getScheduledNotifications';

import ALL_QUOTES from '../../assets/quotes/allQuotes';

const checkIfDayIsActive = (reminder, numberOfDaysAheadToSchedule) => {
  const { time, isMo, isTu, isWe, isTh, isFr, isSa, isSu } = reminder;
  const reminderDate = convertReminderTimeToISODate(
    time,
    numberOfDaysAheadToSchedule
  );
  const weekDay = Moment(reminderDate).format('dddd');

  switch (weekDay) {
    case 'Monday':
      return isMo;
    case 'Tuesday':
      return isTu;
    case 'Wednesday':
      return isWe;
    case 'Thursday':
      return isTh;
    case 'Friday':
      return isFr;
    case 'Saturday':
      return isSa;
    case 'Sunday':
      return isSu;

    default:
      return false;
  }
};

const reminderScheduler = async (reminder, daysAheadToSchedule) => {
  const { id: reminderId, time, isEnabled } = reminder;

  if (!isEnabled) return;

  try {
    const scheduledNotifications = await getScheduledNotifications();

    let globalNumberOfScheduledNotification = scheduledNotifications?.length;

    const nowIso = new Date().toISOString();
    let notificationCounter = daysAheadToSchedule;
    let numberOfDaysAheadToSchedule = 0;

    // schedule notifications
    while (notificationCounter > 0) {
      const isDayActive = checkIfDayIsActive(
        reminder,
        numberOfDaysAheadToSchedule
      );

      const reminderDate = convertReminderTimeToISODate(
        time,
        numberOfDaysAheadToSchedule
      );

      notificationCounter--;
      numberOfDaysAheadToSchedule += 1;

      if (globalNumberOfScheduledNotification >= MAX_NOTIFICATIONS) return;
      if (!isDayActive) continue;
      if (reminderDate < nowIso) continue;

      const date = Moment(reminderDate).format('L');
      const monthDayYearArray = date?.split('/');
      const day = monthDayYearArray[1];
      const id = `${reminderId}${day}`;

      const secondsAheadToSchedule = Math.floor(
        (new Date(reminderDate) - new Date(nowIso)) / 1000
      );

      // check if reminder is in the schedule. continue if it isn't.
      if (scheduledNotifications.map((sn) => sn?.id).includes(id)) continue;

      let quoteIndex = Math.floor(
        Math.random(0, 0.9999999) * ALL_QUOTES.length
      );
      if (quoteIndex > ALL_QUOTES.length) quoteIndex = ALL_QUOTES.length - 1;

      const randomQuote = ALL_QUOTES[quoteIndex];

      // This exercise needs to be scheduled into the notifications list
      global.Notifications.scheduleNotif(
        id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        'steel_bell.mp3',
        secondsAheadToSchedule,
        'Time to Practice ðŸ™Œ',
        randomQuote,
        'exercise'
      );

      globalNumberOfScheduledNotification += 1;
    }
  } catch (e) {
    sentryCaptureMessage('caught reminderScheduler error', e);
  }
};

export default reminderScheduler;
