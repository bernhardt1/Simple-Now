import { Platform } from 'react-native';
import PushNotification from 'react-native-push-notification';
import { DARK_BLUE_LOGO } from '../styles/colors';

import NotificationHandler from './NotificationHandler';

export default class NotifService {
  constructor(onRegister, onNotification) {
    this.lastId = 0;
    this.lastChannelCounter = 0;

    NotificationHandler.attachRegister(onRegister);
    NotificationHandler.attachNotification(onNotification);

    // Clear badge number at start
    PushNotification.getApplicationIconBadgeNumber(function (number) {
      if (number > 0) {
        PushNotification.setApplicationIconBadgeNumber(0);
      }
    });

    PushNotification.getChannels(function (channels) {
      console.log(channels);
    });
  }

  createOrUpdateChannel() {
    this.lastChannelCounter++;
    PushNotification.createChannel(
      {
        channelId: 'custom-channel-id', // (required)
        channelName: `Custom channel - Counter: ${this.lastChannelCounter}`, // (required)
        channelDescription: `A custom channel to categorise your custom notifications. Updated at: ${Date.now()}`, // (optional) default: undefined.
        soundName: 'default', // (optional) See `soundName` parameter of `localNotification` function
        importance: 4, // (optional) default: 4. Int value of the Android notification importance
        vibrate: true, // (optional) default: true. Creates the default vibration patten if true.
      },
      (created) => console.log(`createChannel returned '${created}'`) // (optional) callback returns whether the channel was created, false means it already existed.
    );
  }

  localNotif(soundName) {
    this.lastId++;
    PushNotification.localNotificationSchedule({
      date: new Date(Date.now() + 0 * 1000),
      priority: 'high', // (optional) set notification priority, default: high

      /* Android Only Properties */
      // ticker: 'My Notification Ticker', // (optional)
      // autoCancel: true, // (optional) default: true
      // largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      // smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
      // bigText: null, // (optional) default: "message" prop
      // subText: null, // shows to the right of the app name (optional) default: none
      // color: 'blue', // (optional) default: system default
      // vibrate: true, // (optional) default: true
      // vibration: 700, // vibration length in milliseconds, ignored if vibrate=false, default: 1000

      /* iOS only properties */
      // alertAction: 'view', // (optional) default: view

      /* iOS and Android properties */
      // id: this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      // title: 'Practice Mindfulness', // (optional)
      message: 'Remember your goal to practice.', // (required)
      userInfo: { screen: '001/0/3' }, // (optional) default: {} (using null throws a JSON value '<null>' error)
      // playSound: true, // (optional) default: true
      // number: 1, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      // soundName: soundName ? soundName : 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    });
  }

  scheduleNotif(id, soundName, secondAheadToSchedule, title, message, route) {
    this.lastId++;
    PushNotification.localNotificationSchedule({
      date: new Date(Date.now() + secondAheadToSchedule * 1000),
      priority: 'high', // (optional) set notification priority, default: high

      /* Android Only Properties */
      // ticker: 'My Notification Ticker', // (optional)
      autoCancel: true, // (optional) default: true
      largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
      smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
      bigText: null, // (optional) default: "message" prop
      subText: null, // shows to the right of the app name (optional) default: none
      color: DARK_BLUE_LOGO, // (optional) default: system default
      vibrate: true, // (optional) default: true
      vibration: 700, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
      // tag: 'some_tag', // (optional) add tag to message
      // group: 'group', // (optional) add group to message
      // groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
      // ongoing: false, // (optional) set whether this is an "ongoing" notification
      // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
      // invokeApp: false, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

      // when: null, // (optionnal) Add a timestamp pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
      // usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
      // timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null

      /* iOS only properties */
      alertAction: 'view', // (optional) default: view
      // category: 'something_happened', // (optional) default: empty string

      /* iOS and Android properties */
      id: id ? id : this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      title: title ? title : 'Practice Mindfulness', // (optional)
      message: message ? message : 'Remember your goal to practice.', // (required)
      userInfo: { screen: route }, // (optional) default: {} (using null throws a JSON value '<null>' error)
      playSound: true, // (optional) default: true
      number: 1, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
      soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    });
  }

  // async popInitialNotification() {
  //   const poppedNotification = await PushNotification.popInitialNotification();
  //   return poppedNotification;
  // }

  checkPermission(cbk) {
    return PushNotification.checkPermissions(cbk);
  }

  requestPermissions() {
    if (Platform.OS === 'ios') return PushNotification.requestPermissions();
  }

  cancelNotif() {
    PushNotification.cancelLocalNotifications({ id: '' + this.lastId });
  }

  cancelAll() {
    PushNotification.cancelAllLocalNotifications();
  }

  abandonPermissions() {
    if (Platform.OS === 'ios') return PushNotification.abandonPermissions();
  }

  getScheduledLocalNotifications(callback) {
    PushNotification.getScheduledLocalNotifications(callback);
  }
}
